# -*- coding: utf-8 -*-
"""Stock Price prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J2Gv7h5_94d_DTz1p-_mI8Og7tIgxL-D
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

# Load the forecasted and historical stock price data
forecast_df = pd.read_csv('/content/Forecasted_Price.csv')
historical_df = pd.read_csv('/content/Stocks.csv')

# Convert the date columns from string to datetime objects
forecast_df['forecast_timestamp'] = pd.to_datetime(forecast_df['forecast_timestamp'])
historical_df['Date'] = pd.to_datetime(historical_df['Date'])

# Filter data for a specific stock symbol
symbol = 'GOOG'  # Replace with your stock symbol
forecast_data = forecast_df[forecast_df['Symbol'] == symbol]
historical_data = historical_df[historical_df['Symbol'] == symbol]

# Plot the historical data
plt.figure(figsize=(14, 7))
plt.plot(historical_data['Date'], historical_data['Close'], label='Historical', color='blue')

# Plot the forecasted data
plt.plot(forecast_data['forecast_timestamp'], forecast_data['forecast_value'], label='Forecast', color='orange')

# Plot the confidence intervals
plt.fill_between(forecast_data['forecast_timestamp'],
                 forecast_data['confidence_interval_lower_bound'],
                 forecast_data['confidence_interval_upper_bound'],
                 color='skyblue', alpha=0.5, label='Confidence Interval')

# Set plot title and labels
plt.title(f'Stock Price Forecast with Confidence Interval for {symbol}')
plt.xlabel('Date')
plt.ylabel('Price')

# Improve the x-axis date format
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator())

# Show legend
plt.legend()

# Show grid
plt.grid(True)

# Rotate the x-axis labels for better readability
plt.xticks(rotation=45)

# Show the plot
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import timedelta

# Load the forecasted and historical stock price data
forecast_df = pd.read_csv('/content/Forcasted_Price_v2.csv')
historical_df = pd.read_csv('/content/Stocks.csv')

# Convert the date columns from string to datetime objects
forecast_df['forecast_timestamp'] = pd.to_datetime(forecast_df['forecast_timestamp'])
historical_df['Date'] = pd.to_datetime(historical_df['Date'])

# Define the timeframe as past 5 years
end_date = historical_df['Date'].max()
start_date = end_date - timedelta(days= 1 * 365)

# Filter the historical data for the past 5 years
historical_data = historical_df[(historical_df['Date'] >= start_date) & (historical_df['Date'] <= end_date)]

# Filter data for a specific stock symbol
symbol = 'GOOG'  # Replace with your stock symbol
forecast_data = forecast_df[forecast_df['Symbol'] == symbol]
historical_data = historical_data[historical_data['Symbol'] == symbol]

# Plot the historical data
plt.figure(figsize=(14, 7))
plt.plot(historical_data['Date'], historical_data['Close'], label='Historical', color='blue')

# Plot the forecasted data
plt.plot(forecast_data['forecast_timestamp'], forecast_data['forecast_value'], label='Forecast', color='orange')

# Plot the confidence intervals
plt.fill_between(forecast_data['forecast_timestamp'],
                 forecast_data['confidence_interval_lower_bound'],
                 forecast_data['confidence_interval_upper_bound'],
                 color='skyblue', alpha=0.5, label='Confidence Interval')

# Set plot title and labels
plt.title(f'Stock Price Forecast with Confidence Interval for {symbol} (Last 1 Years)')
plt.xlabel('Date')
plt.ylabel('Price')

# Improve the x-axis date format
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator())

# Show legend
plt.legend()

# Show grid
plt.grid(True)

# Rotate the x-axis labels for better readability
plt.xticks(rotation=45)

# Show the plot
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from datetime import timedelta

# Load the forecasted and historical stock price data
forecast_df = pd.read_csv('/content/Forcasted_Price_v2.csv')
historical_df = pd.read_csv('/content/Stocks.csv')

# Convert the date columns from string to datetime objects
forecast_df['forecast_timestamp'] = pd.to_datetime(forecast_df['forecast_timestamp'])
historical_df['Date'] = pd.to_datetime(historical_df['Date'])

# Define the timeframe as past 5 years
end_date = historical_df['Date'].max()
start_date = end_date - timedelta(days= 1 * 365)

# Filter the historical data for the past 5 years
historical_data = historical_df[(historical_df['Date'] >= start_date) & (historical_df['Date'] <= end_date)]

# Filter data for a specific stock symbol
symbol = 'MSFT'  # Replace with your stock symbol
forecast_data = forecast_df[forecast_df['Symbol'] == symbol]
historical_data = historical_data[historical_data['Symbol'] == symbol]

# Plot the historical data
plt.figure(figsize=(14, 7))
plt.plot(historical_data['Date'], historical_data['Close'], label='Historical', color='blue')

# Plot the forecasted data
plt.plot(forecast_data['forecast_timestamp'], forecast_data['forecast_value'], label='Forecast', color='orange')

# Plot the confidence intervals
plt.fill_between(forecast_data['forecast_timestamp'],
                 forecast_data['confidence_interval_lower_bound'],
                 forecast_data['confidence_interval_upper_bound'],
                 color='skyblue', alpha=0.5, label='Confidence Interval')

# Set plot title and labels
plt.title(f'Stock Price Forecast with Confidence Interval for {symbol} (Last 1 Years)')
plt.xlabel('Date')
plt.ylabel('Price')

# Improve the x-axis date format
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator())

# Show legend
plt.legend()

# Show grid
plt.grid(True)

# Rotate the x-axis labels for better readability
plt.xticks(rotation=45)

# Show the plot
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data from the SQL query into a DataFrame
# Replace with the actual file path to the CSV file
df = pd.read_csv('/content/Volume Analysis.csv')

# Convert the 'Date' column to datetime
df['Date'] = pd.to_datetime(df['Date'])

# Ask the user for the symbol to visualize
symbol = input("Enter the stock symbol you want to visualize: ").upper().strip()

# Filter the DataFrame for the entered symbol
df_symbol = df[df['Symbol'] == symbol]

if df_symbol.empty:
    print(f"No data found for symbol: {symbol}")
else:
    # Set the style for seaborn plots
    sns.set_style("whitegrid")

    # Visualization 1: Time Series Plot of Volume
    plt.figure(figsize=(14, 7))
    plt.plot(df_symbol['Date'], df_symbol['Volume'], label='Volume')
    plt.title(f'Daily Volume Over Time for {symbol}')
    plt.xlabel('Date')
    plt.ylabel('Volume')
    plt.legend()
    plt.show()

    # Visualization 2: Volume Change Over Time
    plt.figure(figsize=(14, 7))
    plt.plot(df_symbol['Date'], df_symbol['VolumeChange'], label='Volume Change')
    plt.title(f'Daily Volume Change Over Time for {symbol}')
    plt.xlabel('Date')
    plt.ylabel('Volume Change')
    plt.legend()
    plt.show()

    # Visualization 3: Histogram of Volume Changes
    plt.figure(figsize=(10, 6))
    sns.histplot(df_symbol['VolumeChange'], bins=50, kde=True)
    plt.title(f'Distribution of Volume Changes for {symbol}')
    plt.xlabel('Volume Change')
    plt.ylabel('Frequency')
    plt.show()

    # Visualization 4: Volume Change Percentage Over Time
    plt.figure(figsize=(14, 7))
    plt.plot(df_symbol['Date'], df_symbol['VolumeChangePercent'], label='Volume Change %')
    plt.title(f'Volume Change Percentage Over Time for {symbol}')
    plt.xlabel('Date')
    plt.ylabel('Volume Change %')
    plt.legend()
    plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta

# Load the data from the SQL query into a DataFrame
# Replace with the actual file path to the CSV file
df = pd.read_csv('/content/Volume Analysis.csv')

# Convert the 'Date' column to datetime
df['Date'] = pd.to_datetime(df['Date'])

# Filter the DataFrame for the last year
one_year_ago = datetime.now() - timedelta(days=365)
df_last_year = df[df['Date'] > one_year_ago]

# Ask the user for the symbol to visualize
symbol = input("Enter the stock symbol you want to visualize: ").upper().strip()

# Filter the DataFrame for the entered symbol and last year
df_symbol = df_last_year[df_last_year['Symbol'] == symbol]

if df_symbol.empty:
    print(f"No data found for symbol: {symbol} in the last year")
else:
    # Set the style for seaborn plots
    sns.set_style("whitegrid")

    # Visualization 1: Time Series Plot of Volume
    plt.figure(figsize=(14, 7))
    plt.plot(df_symbol['Date'], df_symbol['Volume'], label='Volume')
    plt.title(f'Daily Volume Over Time for {symbol} (Last Year)')
    plt.xlabel('Date')
    plt.ylabel('Volume')
    plt.legend()
    plt.show()

    # Visualization 2: Volume Change Over Time
    plt.figure(figsize=(14, 7))
    plt.plot(df_symbol['Date'], df_symbol['VolumeChange'], label='Volume Change')
    plt.title(f'Daily Volume Change Over Time for {symbol} (Last Year)')
    plt.xlabel('Date')
    plt.ylabel('Volume Change')
    plt.legend()
    plt.show()

    # Visualization 3: Histogram of Volume Changes
    plt.figure(figsize=(10, 6))
    sns.histplot(df_symbol['VolumeChange'], bins=50, kde=True)
    plt.title(f'Distribution of Volume Changes for {symbol} (Last Year)')
    plt.xlabel('Volume Change')
    plt.ylabel('Frequency')
    plt.show()

    # Visualization 4: Volume Change Percentage Over Time
    plt.figure(figsize=(14, 7))
    plt.plot(df_symbol['Date'], df_symbol['VolumeChangePercent'], label='Volume Change %')
    plt.title(f'Volume Change Percentage Over Time for {symbol} (Last Year)')
    plt.xlabel('Date')
    plt.ylabel('Volume Change %')
    plt.legend()
    plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta

# Load the data from the SQL query into a DataFrame
# Replace with the actual file path to the CSV file
df = pd.read_csv('/content/Volume Analysis.csv')

# Convert the 'Date' column to datetime
df['Date'] = pd.to_datetime(df['Date'])

# Filter the DataFrame for the last year
one_year_ago = datetime.now() - timedelta(days=365)
df_last_year = df[df['Date'] > one_year_ago]

# Ask the user for the symbol to visualize
symbol = input("Enter the stock symbol you want to visualize: ").upper().strip()

# Filter the DataFrame for the entered symbol and last year
df_symbol = df_last_year[df_last_year['Symbol'] == symbol]

if df_symbol.empty:
    print(f"No data found for symbol: {symbol} in the last year")
else:
    # Set the style for seaborn plots
    sns.set_style("whitegrid")

    # Visualization 1: Time Series Plot of Volume
    plt.figure(figsize=(14, 7))
    plt.plot(df_symbol['Date'], df_symbol['Volume'], label='Volume')
    plt.title(f'Daily Volume Over Time for {symbol} (Last Year)')
    plt.xlabel('Date')
    plt.ylabel('Volume')
    plt.legend()
    plt.show()

    # Visualization 2: Volume Change Over Time
    plt.figure(figsize=(14, 7))
    plt.plot(df_symbol['Date'], df_symbol['VolumeChange'], label='Volume Change')
    plt.title(f'Daily Volume Change Over Time for {symbol} (Last Year)')
    plt.xlabel('Date')
    plt.ylabel('Volume Change')
    plt.legend()
    plt.show()

    # Visualization 3: Histogram of Volume Changes
    plt.figure(figsize=(10, 6))
    sns.histplot(df_symbol['VolumeChange'], bins=50, kde=True)
    plt.title(f'Distribution of Volume Changes for {symbol} (Last Year)')
    plt.xlabel('Volume Change')
    plt.ylabel('Frequency')
    plt.show()

    # Visualization 4: Volume Change Percentage Over Time
    plt.figure(figsize=(14, 7))
    plt.plot(df_symbol['Date'], df_symbol['VolumeChangePercent'], label='Volume Change %')
    plt.title(f'Volume Change Percentage Over Time for {symbol} (Last Year)')
    plt.xlabel('Date')
    plt.ylabel('Volume Change %')
    plt.legend()
    plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Assuming you have the data from the SQL query in a CSV file
df = pd.read_csv('/content/Correlation Analysis.csv')

# Convert the 'Date' column to datetime
df['Date'] = pd.to_datetime(df['Date'])

# Filter data for a specific stock symbol if needed
symbol = 'GOOG'  # Replace with your stock symbol
df = df[df['Symbol'] == symbol]

# Create a scatter plot of PriceChange vs VolumeChange
# Points will be colored based on the CorrelationIndicator
plt.figure(figsize=(10, 6))
for correlation, group in df.groupby('CorrelationIndicator'):
    plt.scatter(group['PriceChange'], group['VolumeChange'], label=correlation, alpha=0.6)

plt.title(f'Price Change vs Volume Change Correlation for {symbol}')
plt.xlabel('Price Change')
plt.ylabel('Volume Change')
plt.legend()
plt.grid(True)
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Assuming you have the data from the SQL query in a CSV file
df = pd.read_csv('/content/Volatility.csv')

# Convert the 'Date' column to datetime
df['Date'] = pd.to_datetime(df['Date'])

# Filter data for the last year
one_year_ago = datetime.now() - timedelta(days=365)
df_last_year = df[df['Date'] > one_year_ago]

# Filter data for a specific stock symbol if desired
symbol = 'GOOG'  # Replace with your stock symbol
df_symbol = df_last_year[df_last_year['Symbol'] == symbol]

# Plot daily volatility over time for the last year
plt.figure(figsize=(14, 7))
plt.plot(df_symbol['Date'], df_symbol['DailyVolatility'], label='Daily Volatility')
plt.title(f'Daily Volatility Over Time for {symbol} (Last Year)')
plt.xlabel('Date')
plt.ylabel('Volatility')
plt.legend()
plt.show()

# Plot daily volatility percentage change over time for the last year
plt.figure(figsize=(14, 7))
plt.bar(df_symbol['Date'], df_symbol['VolatilityChangePercent'], label='Volatility Change %')
plt.title(f'Daily Volatility Percentage Change Over Time for {symbol} (Last Year)')
plt.xlabel('Date')
plt.ylabel('Volatility Change %')
plt.axhline(0, color='grey', linewidth=0.8)  # Add a line at y=0 for reference
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta

# Load the anomaly data from the CSV file
file_path = '/content/Anomalies.csv'  # Replace with the path to your anomaly data file
anomalies_df = pd.read_csv(file_path)

# Convert 'Date' column to datetime format (removing timezone if present)
anomalies_df['Date'] = pd.to_datetime(anomalies_df['Date']).dt.tz_localize(None)

# Filter the DataFrame for the last year
one_year_ago = datetime.now() - timedelta(days=365)
df_last_year = anomalies_df[anomalies_df['Date'] > one_year_ago]

# Plotting the data
fig, ax = plt.subplots(figsize=(15, 7))

# Group by Symbol to plot each symbol's data in one plot
for symbol in df_last_year['Symbol'].unique():
    symbol_data = df_last_year[df_last_year['Symbol'] == symbol]
    ax.plot(symbol_data['Date'], symbol_data['Close'], label=symbol)

    # Highlight anomalies
    anomalies = symbol_data[symbol_data['is_anomaly']]
    ax.scatter(anomalies['Date'], anomalies['Close'], edgecolors='r', facecolors='none', s=100, label=f'Anomaly in {symbol}')

ax.set_title('Stock Price Anomalies Over the Last Year')
ax.set_xlabel('Date')
ax.set_ylabel('Close Price')
ax.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

